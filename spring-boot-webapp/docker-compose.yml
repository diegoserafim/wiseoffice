version: '3.8'

services:
  # Aplicação Spring Boot
  app:
    build: .
    container_name: task-manager-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DATABASE_URL=jdbc:postgresql://db:5432/webapp_db
      - DATABASE_USERNAME=webapp_user
      - DATABASE_PASSWORD=webapp_password
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRATION=86400000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - app-logs:/app/logs

  # Banco de dados PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: task-manager-db
    environment:
      - POSTGRES_DB=webapp_db
      - POSTGRES_USER=webapp_user
      - POSTGRES_PASSWORD=webapp_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webapp_user -d webapp_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: task-manager-redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: task-manager-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app-logs:
    driver: local

